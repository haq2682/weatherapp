{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","type","placeholder","value","onChange","e","target","onKeyPress","key","fetch","then","res","json","result","console","log","main","name","sys","country","d","date","String","window","Date","slice","dateBuild","temp","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kKACMA,EACG,mCADHA,EAEI,2CAyCKC,MAvCf,WACI,IADW,EAMeC,mBAAS,IANxB,mBAMJC,EANI,KAMGC,EANH,OAOmBF,mBAAS,IAP5B,mBAOJG,EAPI,KAOKC,EAPL,KAmBX,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,oBACX,2BAAOA,UAAU,aAAaC,KAAK,OAAOC,YAAY,kBAAkBC,MAAOP,EAAOQ,SAAU,SAACC,GAAOR,EAASQ,EAAEC,OAAOH,QAASI,WAdhI,SAACF,GACE,UAAVA,EAAEG,KACFC,MAAM,GAAD,OAAIhB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDiB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAACG,GACHd,EAAWc,GACXhB,EAAS,IACTiB,QAAQC,IAAIF,UASQ,oBAAff,EAAQkB,KACjB,6BACI,yBAAKhB,UAAU,sBACX,yBAAKA,UAAU,YAAYF,EAAQmB,KAAnC,KAA2CnB,EAAQoB,IAAIC,SACvD,yBAAKnB,UAAU,QA3Bb,SAACoB,GACf,IAAIC,EAAOC,OAAO,IAAIC,OAAOC,MAE7B,OADAH,EAAOA,EAAKI,MAAM,EAAE,IAyBeC,CAAU,IAAIF,QAEzC,yBAAKxB,UAAU,qBACX,yBAAKA,UAAU,eAAeF,EAAQkB,KAAKW,KAA3C,SACA,yBAAK3B,UAAU,WAAWF,EAAQA,QAAQ,GAAGkB,QAGhD,KC5BGY,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.e842c8ce.chunk.js","sourcesContent":["import React, {useState} from 'react';\nconst api = {\n    key: 'a6fbcbd455a0066c7a0b8ee1966784de',\n    base: 'https://api.openweathermap.org/data/2.5/'\n}\nfunction App() {\n    const dateBuild = (d) => {\n        let date = String(new window.Date());\n        date = date.slice(3,15);\n        return date;\n    }\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    const search = (e) => {\n        if (e.key === \"Enter\") {\n            fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n            .then(res=>res.json())\n            .then((result) => {\n                setWeather(result);\n                setQuery('');\n                console.log(result);\n            })\n        }\n    }\n    return(\n        <div className=\"App\">\n            <div className=\"search-container\">\n                <input className=\"search-bar\" type=\"text\" placeholder=\"Enter city name\" value={query} onChange={(e) => {setQuery(e.target.value)}} onKeyPress={search}/>\n            </div>\n            {(typeof weather.main !=\"undefined\") ? (\n            <div>\n                <div className=\"location-container\">\n                    <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                    <div className=\"date\">{dateBuild(new Date())}</div>\n                </div>\n                <div className=\"weather-container\">\n                    <div className=\"temperature\">{weather.main.temp}&deg;C</div>\n                    <div className=\"weather\">{weather.weather[0].main}</div>\n                </div>\n            </div>\n            ) : (\"\")}\n        </div>\n    )\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}